---
- name: "postgresql | check if PG_VERSION exists"
  ansible.builtin.stat:
    path: "{{ postgres.data_directory }}/PG_VERSION"
  register: pgversion

- name: "postgresql | check if postgresql.auto.conf exists"
  ansible.builtin.stat:
    path: "{{ postgres.data_directory }}/postgresql.auto.conf"
  register: pgauto

- name: "postgresql | check if postgres@{{ postgres.unit_target }} exists"
  ansible.builtin.stat:
    path: "/etc/systemd/system/postgresql@{{ postgres.unit_target }}.service.d"
  register: pgunit

- name: "postgresql | replicate primary database"
  become_user: "postgres"
  ansible.builtin.command:
    cmd: |
      /bin/pg_basebackup -h {{ postgres.primary_address }} -U {{ postgres.replication.username }} -D {{ postgres.data_directory }} -w
  environment:
    PGPASSWORD: "{{ postgres.replication.password }}"
  when: |
    not pgversion.stat.exists and not pgauto.stat.exists
    and (
      (genunit.rc is defined and genunit.rc == 0)
      or pgunit.stat.exists
    )
  notify:
    - "restart postgresql"

- name: "postgresql | ensure PGDATA"
  ansible.builtin.file:
    dest: "{{ postgres.data_directory }}"
    state: "directory"
    owner: "postgres"
    group: "postgres"
    mode: "0750"

- name: "postgresql | template main config"
  ansible.builtin.template:
    src: "postgresql.conf.j2"
    dest: "{{ postgres.data_directory }}/postgresql.conf"
    mode: '0644'
    owner: "postgres"
    group: "postgres"
  notify:
    - "restart postgresql"

- name: "postgresql | template hba config"
  ansible.builtin.template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgres.data_directory }}/pg_hba.conf"
    mode: '0644'
    owner: "postgres"
    group: "postgres"
  notify:
    - "restart postgresql"

- name: "postgresql | check standby signal"
  ansible.builtin.stat:
    dest: "{{ postgres.data_directory }}/standby.signal"
  register: standbysignal

- name: "postgresql | set standby signal"
  when: "not standbysignal.stat.exists"
  ansible.builtin.file:
    dest: "{{ postgres.data_directory }}/standby.signal"
    mode: '0644'
    owner: "postgres"
    group: "postgres"
    state: "touch"
  notify:
    - "restart postgresql"

- name: "flushing handlers"
  ansible.builtin.meta: "flush_handlers"

- name: "postgresql | wait for startup"
  ansible.builtin.wait_for:
    port: "{{ postgres.port }}"
    delay: 2

- name: "postgresql | setup replication user"
  become_user: "postgres"
  community.postgresql.postgresql_user:
    name: "{{ postgres.replication.username }}"
    password: "{{ postgres.replication.password }}"
    role_attr_flags: "REPLICATION"

- name: "ensure services started"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "started"
  with_items:
    - "postgresql@{{ postgres.unit_target }}"
    - "pgbouncer"
    - "keepalived"
