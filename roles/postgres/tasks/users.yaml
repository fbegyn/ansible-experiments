---
- name: "postgresql | check port"
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: "{{ postgres.port }}"
    delay: 2

- name: "patroni | check port"
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: "{{ patroni.port }}"
    delay: 2

- name: "patroni | check current status"
  ansible.builtin.command: "/usr/sbin/get-node-role.sh"
  register: "patroni_cmd"

- name: "patroni | set patroni fact"
  ansible.builtin.set_fact:
    patroni: "{{ patroni_cmd.stdout | from_json }}"

- name: "postgresql | setup users"
  community.postgresql.postgresql_user:
    # host: "{{ ansible_host }}"
    name: "{{ item.name }}"
    db: "{{ item.database }}"
    login_user: "{{ postgres.username }}"
    login_password: "{{ postgres.password }}"
  with_items:
    - "{{ postgres.users }}"
  when: 'patroni.Role == "Leader"'

- name: "postgresql | grant privileges"
  community.postgresql.postgresql_privs:
    # host: "{{ ansible_host }}"
    database: "{{ item.database }}"
    privs: "ALL"
    type: "database"
    roles: "{{ item.name }}"
    login_user: "{{ postgres.username }}"
    login_password: "{{ postgres.password }}"
  with_items:
    - "{{ postgres.users }}"
  when: 'patroni.Role == "Leader"'

- name: "postgresql | grant privileges"
  community.postgresql.postgresql_privs:
    # host: "{{ ansible_host }}"
    database: "{{ item.database }}"
    privs: "ALL"
    type: "table"
    obj: "ALL_IN_SCHEMA"
    roles: "{{ item.name }}"
    login_user: "{{ postgres.username }}"
    login_password: "{{ postgres.password }}"
  with_items:
    - "{{ postgres.users }}"
  when: 'patroni.Role == "Leader"'
