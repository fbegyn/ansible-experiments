---
- name: "patroni | create patroni group"
  ansible.builtin.group:
    name: "patroni"
    state: "present"

- name: "patroni | create patroniql user"
  ansible.builtin.user:
    name: "patroni"
    groups: "patroni"
    shell: "/bin/bash"
    state: "present"
    password: "!"
    create_home: false
    system: true

- name: "patroni | ensure log path"
  ansible.builtin.file:
    dest: "{{ patroni.log.directory }}"
    state: "directory"
    owner: "postgres"
    group: "postgres"
    mode: '0750'

- name: "patroni | allow patroni on firewalld"
  ansible.posix.firewalld:
    port: "{{ patroni.port }}/tcp"
    permanent: true
    immediate: true
    state: "enabled"
    zone: "{{ item }}"
  with_items:
    - "public"
    - "internal"
    - "trusted"
    - "home"
  notify:
    - "reload firewalld"

- name: "patroni | script to get leader  IP"
  ansible.builtin.copy:
    dest: "/usr/sbin/get-leader-ip.sh"
    src: "get-leader-ip.sh"
    mode: '0755'
    owner: "postgres"
    group: "postgres"

- name: "patroni | script to get node role"
  ansible.builtin.template:
    src: "get-node-role.sh.j2"
    dest: "/usr/sbin/get-node-role.sh"
    mode: '0755'
    owner: "postgres"
    group: "postgres"

- name: "patroni | config directory"
  ansible.builtin.file:
    dest: "/etc/patroni"
    mode: '0755'
    owner: "postgres"
    group: "postgres"
    state: "directory"

- name: "patroni | template patroni config"
  ansible.builtin.template:
    src: "patroni.yaml.j2"
    dest: "/etc/patroni/patroni.yml"
    mode: '0644'
    owner: "postgres"
    group: "postgres"
  notify:
    - "restart patroni"
    - "start patroni"

- name: "flushing handlers"
  ansible.builtin.meta: "flush_handlers"

- name: "patroni | check port"
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: "{{ patroni.port }}"
    delay: 2
    timeout: 30

- name: "postgresql | wait for startup"
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: "{{ postgres.port }}"
    delay: 2
    timeout: 30

- name: "postgresql | setup replication user"
  community.postgresql.postgresql_user:
    name: "{{ postgres.replication.username }}"
    password: "{{ postgres.replication.password }}"
    login_user: "{{ postgres.username }}"
    login_password: "{{ postgres.password }}"
    role_attr_flags: "REPLICATION"
