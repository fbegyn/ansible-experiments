---
- name: "postgresql | initialize database"
  become_user: "postgres"
  ansible.builtin.command:
    argv:
      - "/usr/bin/postgresql-setup"
      - "--initdb"
      - "--unit=postgresql@{{ postgres.unit_target }}"
      - "--port={{ postgres.port }}"
  when: |
    not pgversion.stat.exists and not pgauto.stat.exists
    and (
      (genunit.rc is defined and genunit.rc == 0)
      or pgunit.stat.exists
    )

- name: "postgresql | template main config"
  ansible.builtin.template:
    src: "postgresql.conf.j2"
    dest: "{{ postgres.data_directory }}/postgresql.conf"
    mode: '0644'
    owner: "postgres"
    group: "postgres"
  notify:
    - "restart postgresql"

- name: "postgresql | template hba config"
  ansible.builtin.template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgres.data_directory }}/pg_hba.conf"
    mode: '0644'
    owner: "postgres"
    group: "postgres"
  notify:
    - "restart postgresql"

- name: "postgresql | setup replication user"
  become_user: "postgres"
  community.postgresql.postgresql_user:
    name: "{{ postgres.replication.username }}"
    password: "{{ postgres.replication.password }}"
    role_attr_flags: "REPLICATION"

- name: "postgresql | clean up standby config"
  ansible.builtin.file:
    dest: "{{ item }}"
    mode: '0644'
    owner: "postgres"
    group: "postgres"
    state: "absent"
  with_items:
    - "{{ postgres.data_directory }}/recovery.conf"
    - "{{ postgres.data_directory }}/standby.signal"
  notify:
    - "restart postgresql"

- name: "postgresql | check standby signal"
  ansible.builtin.stat:
    dest: "{{ postgres.data_directory }}/standby.signal"
  register: standbysignal

- name: "ensure services started"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "started"
  with_items:
    - "postgresql@{{ postgres.unit_target }}"
    - "pgbouncer"
    - "keepalived"
