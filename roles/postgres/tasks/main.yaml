---
- name: "install and basics"
  tags: ["base"]
  ansible.builtin.import_tasks:
    file: "base.yaml"

- name: "postgres"
  tags: ["postgres", "setup"]
  ansible.builtin.import_tasks:
    file: "postgres.yaml"

- name: "keepalived"
  tags: ["keepalived", "setup"]
  ansible.builtin.import_tasks:
    file: "keepalived.yaml"

- name: "patroni | check port"
  tags: ["patroni", "bootstrap"]
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: "{{ patroni.port }}"
    delay: 2
    timeout: 10
  register: "patroni_port"
  ignore_errors: true
  changed_when: false

- name: "patroni | check current status"
  tags: ["patroni", "bootstrap"]
  ansible.builtin.command: "/usr/sbin/get-node-role.sh"
  register: "patroni_cmd"
  ignore_errors: true
  changed_when: false

# when bootstrapping, spin up main instance at first
- name: "patroni-bootstrap"
  when: "inventory_hostname in groups['db-bootstrap'] and (patroni_cmd.rc != 0 or patroni_port.failed)"
  tags: ["patroni", "bootstrap"]
  ansible.builtin.import_tasks:
    file: "patroni.yaml"

# then run against the entire DB cluster
- name: "patroni-cluster"
  tags: ["patroni", "cluster"]
  ansible.builtin.import_tasks:
    file: "patroni.yaml"

- name: "database setup"
  become_user: "postgres"
  tags: ["data", "database"]
  ansible.builtin.import_tasks:
    file: "database.yaml"

- name: "user setup"
  become_user: "postgres"
  tags: ["data", "users"]
  ansible.builtin.import_tasks:
    file: "users.yaml"

- name: "data setup"
  become_user: "postgres"
  tags: ["data"]
  ansible.builtin.import_tasks:
    file: "data.yaml"

- name: "ensure running service"
  ansible.builtin.service:
    name: "{{ item }}"
    state: "started"
  with_items:
    - "patroni"
    - "keepalived"
    - "consul"
